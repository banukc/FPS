void show_image(unsigned char **image,int WIDTH,int HEIGHT)
{
 
 unsigned char *BMPimage;

image=(unsigned char*) malloc(400* sizeof(int));
BMPimage=(unsigned char*) malloc(400* sizeof(int));
 char filename;
  int  i, j,tmp=0,k=54,fd;
 unsigned char bmp_infoheader=BMPimage+14;
  unsigned short int tmp_short;
  int FileId=1;

	
	BMPimage[0]='B';
	BMPimage[1]='M';
	tmp = 14 + 40 + WIDTH* HEIGHT*3 ;
	printf(" BMP image %ld \n",BMPimage);
	

	memcpy((BMPimage+2),&tmp, 4);
	/* 0 */
	printf(" temp %ld \n",tmp);
	printf("bmp image %ld",(BMPimage+2));

	tmp = 0;
	memcpy((BMPimage+6),&tmp, 4);
	/* Offset value */
	tmp = 14 + 40;
	memcpy((BMPimage+10),&tmp, 4);

	/* 40 */
	tmp = 40;
	memcpy(bmp_infoheader,&tmp, 4);
	/* Width */
	tmp = WIDTH;
	memcpy(bmp_infoheader + 4, &tmp, 4);
	/* Height */
	tmp = HEIGHT;
	memcpy(bmp_infoheader + 8, &tmp, 4);
	/* 1 */
	tmp_short = 1;   
	memcpy(bmp_infoheader + 12, &tmp_short, 2);
	/* bpp */
	tmp_short = 24;
	memcpy(bmp_infoheader + 14, &tmp_short, 2);
	/* 0 = nessuna compressione */
	tmp = 0;
	memcpy(bmp_infoheader + 16, &tmp, 4);
	memcpy(bmp_infoheader + 20, &tmp, 4);
	memcpy(bmp_infoheader + 24, &tmp, 4);
	memcpy(bmp_infoheader + 28, &tmp, 4);
	memcpy(bmp_infoheader + 32, &tmp, 4);
	memcpy(bmp_infoheader + 36, &tmp, 4);

  for ( i = 0; i < HEIGHT; i++ )
  {
    for ( j = 0; j < WIDTH; j++ )
    {
         if(image[i][j] == 0) 
         {
			
		 }
		 else
		 {
			
		 }

		 BMPimage[k++] = image[i][j]^0xFF;
		 BMPimage[k++] = image[i][j]^0xFF;
		 BMPimage[k++] = image[i][j]^0xFF;
    }

  }

	printf(" 3--> \n");
  sprintf(filename,"rm -f Test%d.bmp",FileId);
  system(filename);
  sprintf(filename,"touch Test%d.bmp",FileId);
  system(filename);
  sprintf(filename,"Test%d.bmp",FileId);
	
  printf(" 4--> \n");
  fd = open(filename,O_RDWR);
  if(fd>0)
  {
  	write(fd,BMPimage,54);
	for(i=HEIGHT-1;i>=0;i--)
	{
		write(fd,BMPimage+(i*WIDTH*3)+54,WIDTH*3);	
	}
	close(fd);
  }
  else
  {
	printf("File open failed\n");
  }
  FileId++;
}

